% -*- mode: Noweb; noweb-code-mode: python-mode -*-

\section{PXD file}
\label{sec:pxd-file}

<<pyramid.pxd>>=
from imaging cimport imaging, Imaging
from centroiding cimport centroiding, Centroiding
from source cimport Source
cdef extern from "pyramid.h":
    cdef cppclass pyramid:
        float modulation
        imaging camera
        centroiding data
        void setup(int, int, float, int)
        void cleanup()
<<class definitions>>
@
\subsection{Class definition}
\label{sec:class-definition}

\index{pyramid!python!Pyramid}
<<class definitions>>=
cdef class Pyramid:
    cdef:
        pyramid *_c_pyramid
        readonly Imaging camera
        readonly Centroiding data
@
\section{PYX file}
\label{sec:pyx-file}

<<pyramid.pyx>>=
cdef class Pyramid:
    """
    Creates a pyramid wavefront sensor object

    Parameters
    ----------
    N_SIDE_LENSLET : int
       The linear size of the equivalent lenslet array (>1).
    N_PX_LENSLET : int
       The sampling in pixel of the pupil plane.
    modulation : float, optional
       The modulation at the vertex of the pyramid in lambda/D units, defaults to 0
    N_GS : int, optional
       The number of guide stars, defaults to 1

    Attributes
    ----------
    camera : Imaging, readonly
       The detector object
    data : Centroiding, readonly
       The measurements container

    See also
    --------
    Imaging : a class for a Fourier propagation model and for a detector model
    Centroiding : a class for the data processing of wavefront sensor frames


    Examples
    --------
    A 30x30 lenslet equivalent pyramid with a 240x240 pupil resolution is created with

    >>> import ceo
    >>> wfs = ceo.Pyramid(30,240)

    The same pyramid as above but with a 5lambda/D modulation

    >>> wfs = ceo.Pyramid(30,240,modulation=5)

    For an asterism of 3 guide stars:

    >>> wfs = ceo.Pyramid(30,240,modulation=5,N_GS=3)
    """
    def __cinit__(self,int N_SIDE_LENSLET,
                  int N_PX_LENSLET,
                  float modulation = 0.0,
                  int N_GS=1):
        self._c_pyramid = new pyramid()
        self._c_pyramid.setup(N_SIDE_LENSLET,N_PX_LENSLET,modulation,N_GS)
        self.camera = Imaging(1,N_PX_LENSLET-1,DFT_osf=4,N_PX_IMAGE=4*N_PX_LENSLET,
                              BIN_IMAGE=N_PX_LENSLET/N_SIDE_LENSLET,
                              N_SOURCE=N_GS, isPtr=1)
        self.camera.set_ptr( &(self._c_pyramid.camera) )
        self.data = Centroiding(N_SIDE_LENSLET*2, N_SOURCE=N_GS, isPtr=1)
        self.data.set_ptr( &(self._c_pyramid.data) )

    def __dealloc__(self):
        self._c_pyramid.cleanup()

    def propagate(self, Source gs):
        """
        Propagates the guide star to the WFS detector (noiseless)

        Parameters
        ----------
        gs : Source
            The WFS guide star

        See also
        --------
        Source : a class for astronomical sources
        """
        self.camera.propagateThroughPyramid(gs,self._c_pyramid.modulation)
