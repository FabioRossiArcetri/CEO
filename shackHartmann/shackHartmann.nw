% -*- mode: Noweb; noweb-code-mode: c-mode -*-
@
\index{shackHartmann}
\section{The files}
\label{sec:files}

\subsection{Header}
\label{sec:header}

<<shackHartmann.h>>=
#ifndef __SHACKHARTMANN__
#define __SHACKHARTMANN__

#ifndef __UTILITIES_H__
#include "utilities.h"
#endif

#ifndef __SOURCE_H__
#include "source.h"
#endif

#ifndef __IMAGING_H__
#include "imaging.h"
#endif

#ifndef __CENTROIDING_H__
#include "centroiding.h"
#endif

struct shackHartmann {

  <<parameters>>
  void setup(int N_SIDE_LENSLET, int N_PX_LENSLET, float d,
	     int DFT_osf_, int N_PX_IMAGE, int BIN_IMAGE, int N_GS);
  void cleanup(void);
  void calibrate(source *src, float threshold);
  void propagate(source *gs);
  void process(void);
  void analyze(source *gs);
  float* get_frame_dev_ptr(void);
  void get_valid_slopes(float *d__valid_slopes);

};

#endif // __SHACKHARTMANN__

@
\subsection{Source}
\label{sec:source}

<<shackHartmann.cu>>=
#include "shackHartmann.h"

<<valid lenslet>>
<<valid lenslet slopes kernel>>

<<setup>>
<<cleanup>>
<<WFS calibration>>
<<wavefront propagation>>
<<wavefront centroiding>>
<<wavefront processing>>
<<get detector frame>>
<<valid lenslet slopes>>
@

\subsection{Python}
\label{sec:python}

\index{shackHartmann!python}
<<shackHartmann.pxd>>=
from utilities cimport mask
from imaging cimport imaging
from centroiding cimport centroiding
from source cimport source
cdef extern from "shackHartmann.h":
    cdef cppclass shackHartmann:
        int N_LENSLET, N_ACTUATOR
        float lenslet_pitch, slopes_gain, pixel_scale
        float *d__c0
        mask valid_lenslet
        mask valid_actuator
        imaging camera
        centroiding data_proc
        void setup(int , int, float , int , int , int, int)
        void cleanup()
        void calibrate(source *, float )
        void propagate(source *)
        void process()
        void analyze(source *)
	float* get_frame_dev_ptr()
        void get_valid_slopes(float *)
<<class definitions>>
@
\index{shackHartmann!python!ShackHartmann}
<<class definitions>>=
from utilities cimport cuFloatArray, MaskAbstract
from imaging cimport Imaging
from centroiding cimport Centroiding
cdef class ShackHartmann:
    cdef:
        shackHartmann *_c_shackHartmann
        readonly int N_GS
        readonly MaskAbstract valid_lenslet, valid_actuator
        readonly cuFloatArray c0
        readonly Imaging camera
        readonly Centroiding data_proc
        cuFloatArray _valid_slopes_
@
<<shackHartmann.pyx>>=
from libc.math cimport M_PI
from utilities cimport cuFloatArray, MaskAbstract
from source cimport Source
cdef class ShackHartmann:
    """
    Creates a shackHartmann object.

    Parameters
    ----------
    N_SIDE_LENSLET : int
       The linear size of the lenslet array (>=1).
    N_PX_LENSLET : int
       The sampling in pixel of one lenslet.
    d : float
       The lenslet pitch [m].
    DFT_osf : int, optional
       The oversampling factor for the Discrete Fourier Transform, defaults to 2
    N_PX_IMAGE : int, optional
       The sampling in pixel of the imagelet, defaults to N_PX_LENSLET
    BIN_IMAGE : int, optional
       The binning factor of the imagelet, default to 1
    N_GS : int, optional
       The number of guide stars, defaults to 1

    Attributes
    ----------
    N_SIDE_LENSLET : int
       The linear size of the lenslet array (>=1).
    N_PX_LENSLET : int
       The sampling in pixel of one lenslet.
    DFT_osf : int
       The oversampling factor for the Discrete Fourier Transform
    N_PX_IMAGE : int
       The sampling in pixel of the imagelet
    BIN_IMAGE : int
       The binning factor of the imagelet
    N_GS : int
       The number of guide stars
    N_PX_FRAME : int
        The detector resolution
    valid_lenslet : MaskAbstract
        The mask object representing the valid lenslet location
    valid_actuator : MaskAbstract
        The mask object representing the valid actuator location in a Fried geometry
    n_valid_lenslet : int
        The number of valid lenslet
    n_valid_slopes : int
        The number of valid slopes
    pixel_scale : float
        The size of the detector pixel in radian
    pixel_scale_arcsec : float
        The size of the detector pixel in arcsec
    frame : cuFloatArray
         The detector frame
    c0 : cuFloatArray
         The reference slopes vector as [N_GSx2 N_SIDE_LENSLET**2]
    c : cuFloatArray
         The slopes vector as [N_GSx2 N_SIDE_LENSLET**2]
    flux : cuFloatArray
         The map of flux per lenset
    valid_slopes : cuFloatArray
         The vector of valid slopes
    camera : Imaging, readonly
       The detector object
    data_proc : Centroiding, readonly
       The measurements container

    See also
    --------
    MaskAbstract : a class to hold masks properties
    cuFloatArray : an interface class for GPU host and device float data
    Imaging : a class for a Fourier propagation moel and for a detector model
    Centroiding : a class for the data processing of wavefront sensor frames

    Examples
    --------
    A 30x30, 1m lenslet pitch, Nyquist sampled Shack-Hartmann WFS with 8x8 pixel per lenslet is created with

    >>> wfs = ShackHartmann(30,8,1.0)

    The detector resolution is 240 pixels with a lenslet field of view of :math:`8\lambda / 2d`.

    Twice the Nyquist sampling is realized with

    >>> wfs = ShackHartmann(30,8,1.0,DFT_osf=4)

    The detector resolution is still 240 pixels but with a lenslet field of view of :math:`8\lambda / 4d`.

    Half the Nyquist sampling is obtained with

    >>> wfs = ShackHartmann(30,8,1.0, BIN_IMAGE=2)

    The detector resolution is now 120 pixels with a lenslet field of view of :math:`4\lambda / d`.
    A 240 pixels detector resolution is restored with

    >>> wfs = ShackHartmann(30,8,1.0, N_PX_IMAGE=16, BIN_IMAGE=2)

    increasing the field of view by a factor 2 i.e. :math:`8\lambda / d`.

    The number of guide star needs to be passed if larger than 1:

    >>> wfs = ShackHartmann(..., N_GS=6)
    """

    def __cinit__(self, *args, **kwargs):
        self._c_shackHartmann = new shackHartmann()

    def __init__(self, int N_SIDE_LENSLET, int N_PX_LENSLET, float d,
	          DFT_osf=2, N_PX_IMAGE=None, BIN_IMAGE=1, N_GS=1):
        if N_PX_IMAGE is None:
            N_PX_IMAGE = N_PX_LENSLET;
        self.N_GS           = N_GS
        self._c_shackHartmann.setup(N_SIDE_LENSLET, N_PX_LENSLET, d,
                                    DFT_osf, N_PX_IMAGE, BIN_IMAGE, N_GS)

        self.camera = Imaging(N_SIDE_LENSLET, N_PX_LENSLET,
                              DFT_osf=DFT_osf,N_PX_IMAGE=N_PX_IMAGE,
                              BIN_IMAGE=BIN_IMAGE,N_SOURCE=N_GS,wfs=self)
        self.data_proc = Centroiding(N_SIDE_LENSLET,wfs=self)

        self.valid_lenslet = MaskAbstract(self._c_shackHartmann.N_LENSLET*self.N_GS)
        self.valid_lenslet._c_mask = &(self._c_shackHartmann.valid_lenslet)
	self.valid_lenslet.f = cuFloatArray(shape=(self._c_shackHartmann.N_LENSLET*self.N_GS,1))
        self.valid_lenslet.f._c_gpu.dev_data = self.valid_lenslet._c_mask.f

        self.valid_actuator = MaskAbstract(self._c_shackHartmann.N_ACTUATOR*self.N_GS)
        self.valid_actuator._c_mask = &(self._c_shackHartmann.valid_actuator)
	self.valid_actuator.f = cuFloatArray(shape=(self._c_shackHartmann.N_ACTUATOR*self.N_GS,1))
        self.valid_actuator.f._c_gpu.dev_data = self.valid_actuator._c_mask.f

	self.c0 = cuFloatArray(shape=(self.N_GS,(self.N_SIDE_LENSLET**2)*2))
	self.c0._c_gpu.dev_data = self._c_shackHartmann.d__c0

    def __dealloc__(self):
        self._c_shackHartmann.cleanup()

    def calibrate(self, Source gs, float threshold):
        """
        Selects the WFS valid lenslet and calibrated the reference slopes

        Parameters
        ----------
        gs : Source
            The WFS guide star
        threshold : float
            The intensity threshold, a lenslet is discared if the flux of the lenslet divided by the fully illuminated flux of the lenslet is less than the threshold

        See also
        --------
        Source : a class for astronomical sources
        """
        self._c_shackHartmann.calibrate(gs._c_source, threshold)
        self._valid_slopes_ = cuFloatArray(shape=(1,self._c_shackHartmann.valid_lenslet.nnz*2),
                                           dev_malloc=True)

    def analyze(self, Source gs):
        """
        Propagates the guide star to the WFS detector (noiseless) and processes the frame

        Parameters
        ----------
        gs : Source
            The WFS guide star

        See also
        --------
        Source : a class for astronomical sources
        """
        self._c_shackHartmann.analyze(gs._c_source)

    def propagate(self, Source gs):
        """
        Propagates the guide star to the WFS detector (noiseless)

        Parameters
        ----------
        gs : Source
            The WFS guide star

        See also
        --------
        Source : a class for astronomical sources
        """
        self._c_shackHartmann.propagate(gs._c_source)

    def process(self):
        """
        Processes the WFS detector frame
        """
        self._c_shackHartmann.process()

    def readOut(self,float exposureTime, float readOutNoiseRms):
        """
        Reads-out the WFS detector frame adding photon and read-out noises

        Parameters
        ----------
        exposureTime : float
            The detector integration time [s]
        readoutNoiseRms : float
            The rms of the detector read-out noise
        """
        self._c_shackHartmann.camera.readout(exposureTime,readOutNoiseRms)

    def reset(self):
        """
        Resets the WFS detector frame to 0
        """
        self._c_shackHartmann.camera.reset()

    def pointing(self,float zen, float azim):
        """
        Sets the pointing of the WFS relative to the guide star

        Parameters
        ----------
        zen : float
            The zenith angle [rd]
        azim : float
            The azimuth angle [rd]
        """
        self._c_shackHartmann.camera.set_pointing_direction(zen, azim)

    property N_SIDE_LENSLET:
        def __get__(self):
            return self.camera.N_SIDE_LENSLET

    property N_PX_LENSLET:
        def __get__(self):
            return self.camera.N_PX_LENSLET

    property DFT_osf:
        def __get__(self):
            return self.camera.DFT_osf

    property N_PX_IMAGE:
        def __get__(self):
            return self.camera.N_PX_IMAGE

    property BIN_IMAGE:
        def __get__(self):
            return self.camera.BIN_IMAGE

    property N_PX_FRAME:
        def __get__(self):
            return self.camera.N_PX_FRAME

    property valid_slopes:
        def __get__(self):
            self._c_shackHartmann.get_valid_slopes(self._valid_slopes_._c_gpu.dev_data)
            return self._valid_slopes_

    property n_valid_lenslet:
        def __get__(self):
            return self.valid_lenslet.nnz

    property n_valid_slopes:
        def __get__(self):
            return 2*self.n_valid_lenslet

    property slopes_gain:
        def __set__(self, float val):
            self._c_shackHartmann.slopes_gain = val

    property pixel_scale:
        def __get__(self):
            return self._c_shackHartmann.pixel_scale

    property pixel_scale_arcsec:
        def __get__(self):
            return self._c_shackHartmann.pixel_scale*180*3600/M_PI

    property frame:
        def __get__(self):
            return self.camera.frame

    property flux:
        def __get__(self):
            return self.data_proc.flux

    property c:
        def __get__(self):
            return self.data_proc.c
@
<<shackHartmann.pyx>>=
from utilities import JSONAbstract
class JShackHartmann(JSONAbstract,ShackHartmann):
    def __init__(self, jprms = None, jsonfile = None):
        print "@(ceo.JShackHartmann)>"
        JSONAbstract.__init__(self,jprms=jprms, jsonfile=jsonfile)
        nLenslet   = self.jprms["lenslet #"]
        nPxLenslet = (self.jprms["pupil sampling"]-1)/nLenslet
        assert (nPxLenslet*nLenslet==self.jprms["pupil sampling"]-1), \
             "The number of pixel per lenslet in the pupil plane is not an integer number!"
        d          = float(self.jprms["pupil size"])/nLenslet
        N_PX       = self.jprms["resolution"]*self.jprms["binning factor"]
        ShackHartmann.__init__(self,nLenslet,nPxLenslet,d,
                               DFT_osf    = 2*self.jprms["nyquist factor"],
                               N_PX_IMAGE = N_PX,
                               BIN_IMAGE  = self.jprms["binning factor"],
                               N_GS       = self.jprms["guide star #"])
@
\section{Parameters}
\label{sec:parameters}

\index{shackHartmann!shackHartmann}
The parameters of the [[shackHartmann]] structure are:
\begin{itemize}
\item the number of wavefront sensor:
<<parameters>>=
int N_WFS;
@ \item the total number of lenslets:
<<parameters>>=
int N_LENSLET;
@ \item the total number of actuators in the Fried geometry:
<<parameters>>=
int N_ACTUATOR;
@ \item the total number of slopes:
<<parameters>>=
int N_SLOPE;
@ \item the reference slopes:
<<parameters>>=
float *d__c0, *d__cx0, *d__cy0;
@ \item the valid lenslet mask:
<<parameters>>=
mask valid_lenslet;
@ \item the valid actuator mask for a Fried geometry:
<<parameters>>=
mask valid_actuator;
@ \item the imager which combines a lenslet array with a camera:
<<parameters>>=
imaging camera;
@ \item the data processing algorithm:
<<parameters>>=
centroiding data_proc;
@ \item the oversampling factor of the DFT [[DFT_osf]]:
<<parameters>>=
int DFT_osf;
@ \item the lenslet pitch:
<<parameters>>=
float lenslet_pitch;
@ \item the pixel scale:
<<parameters>>=
float pixel_scale;
@ \item the lenslet intensity threshold:
<<parameters>>=
float intensity_threshold;
@ \item the slopes gain:
<<parameters>>=
float slopes_gain;
@ \end{itemize}

\section{Functions}
\label{sec:functions}

\subsection{Setup \& Cleanup}
\label{sec:setup--cleanup}

The [[shackHartmann]] structure is initialized with:
\begin{itemize}
\item the linear size of the lenslet array [[N_SIDE_LENSLET]],
\item the number of pixels per lenslet [[N_PX_LENSLET]],
\item the oversampling factor of the DFT [[DFT_osf]]$\geq 2$,
\item the pixel size of the image plane [[N_PX_IMAGE]],
\item the binning factor of the image plane [[BIN_IMAGE]]$\geq 1$,
\item the number of guide stars [[N_GS]].
\end{itemize}
\index{shackHartmann!shackHartmann!setup}
<<setup>>=
void shackHartmann::setup(int N_SIDE_LENSLET, int N_PX_LENSLET, float d,
			  int DFT_osf_, int N_PX_IMAGE, int BIN_IMAGE, int N_GS)
{
  lenslet_pitch = d;
  DFT_osf    = DFT_osf_;
  N_LENSLET  = N_SIDE_LENSLET*N_SIDE_LENSLET;
  N_ACTUATOR = (N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1);
  N_WFS      = N_GS;
  N_SLOPE    = N_LENSLET*N_GS*2;
  slopes_gain = 1.0;
  HANDLE_ERROR( cudaMalloc( (void**)&d__c0 , sizeof(float) *N_SLOPE ) );
  HANDLE_ERROR( cudaMemset( d__c0, 0, sizeof(float)*N_SLOPE ) );
  d__cx0 = d__c0;
  d__cy0 = d__c0 + N_LENSLET;
  valid_lenslet.setup(N_LENSLET*N_WFS);//,(N_SIDE_LENSLET-1)*d);
  valid_actuator.setup(N_ACTUATOR*N_WFS);//,N_SIDE_LENSLET*d);
  camera.setup(N_PX_LENSLET, N_SIDE_LENSLET, DFT_osf,
		     N_PX_IMAGE,  BIN_IMAGE, N_GS);
  data_proc.setup(N_SIDE_LENSLET, N_GS);
  <<lenslet mask pointer>>
}
@
The [[lenslet_mask]] in [[data_proc]] now points to the mask in the [[valid_lenslet]] [[mask]] structure
<<lenslet mask pointer>>=
HANDLE_ERROR( cudaFree( data_proc.lenslet_mask) );
data_proc.lenslet_mask = valid_lenslet.m;
@
Allocated memory is freed with:
\index{shackHartmann!shackHartmann!cleanup}
<<cleanup>>=
void shackHartmann::cleanup(void)
{
  fprintf(stdout,"@(CEO)>shackHartmann: freeing memory!\n");
  fprintf(stdout," |-");
  valid_lenslet.cleanup();
  data_proc.lenslet_mask = 0;
  fprintf(stdout," |-");
  valid_actuator.cleanup();
  fprintf(stdout," |-");
  camera.cleanup();
  fprintf(stdout," |-");
  data_proc.cleanup();
}
@

\subsection{Calibration}
\label{sec:calibration}

The WFS calibration routine is:
\index{shackHartmann!shackHartmann!calibrate}
<<WFS calibration>>=
void shackHartmann::calibrate(source *src, float threshold) {
  <<WFS calibration source propagation>>
  <<WFS calibration reference slopes>>
  <<WFS calibration valid lenslet>>
  data_proc.MASK_SET = 1;
  camera.reset();
}
@
The wavefront sensor need first to be calibrated with a reference calibration source.
<<WFS calibration source propagation>>=
camera.pixel_scale = src->wavelength()/(lenslet_pitch*DFT_osf);
pixel_scale = camera.pixel_scale*camera.BIN_IMAGE*slopes_gain;
camera.propagate(src);
@
The slopes derived from the calibration wavefront will be set a the reference slopes.
<<WFS calibration reference slopes>>=
data_proc.get_data(camera.d__frame,camera.N_PX_CAMERA);
HANDLE_ERROR( cudaMemcpy( d__c0, data_proc.d__c, N_SLOPE*sizeof(float),
			  cudaMemcpyDeviceToDevice ) );
HANDLE_ERROR( cudaMemset( data_proc.d__c, 0, sizeof(float)*N_SLOPE ) );
@
The total intensity per lenslet is used to compute the valid lenslet.
The valid lenslet and actuator masks are first set to 0.
<<WFS calibration valid lenslet>>=
HANDLE_ERROR( cudaMemset(valid_lenslet.m,  0, sizeof(char)*N_LENSLET*N_WFS  ) );
HANDLE_ERROR( cudaMemset(valid_actuator.m, 0, sizeof(char)*N_ACTUATOR*N_WFS ) );
@
The maximum lenslet intensity is sought:
<<WFS calibration valid lenslet>>=
cublasHandle_t handle;
cublasCreate(&handle);
int idx;
CUBLAS_ERROR( cublasIsamax(handle, N_LENSLET*N_WFS, data_proc.d__mass, 1, &idx) );
cublasDestroy(handle);
idx--;
@
The masks are computed with the [[set_valid_lenslet]] kernel:
<<WFS calibration valid lenslet>>=
int NL = camera.N_SIDE_LENSLET;
dim3 blockDim(16,16);
dim3 gridDim(NL/16+1,NL/16+1,N_WFS); // The 3rd argument sets the WFS which intensity is used for calibration
set_valid_lenslet LLL gridDim,blockDim RRR (valid_lenslet.m, valid_actuator.m,
                                            NL, data_proc.d__mass,
                                            idx, threshold);
valid_lenslet.set_filter();
valid_lenslet.set_index();
valid_actuator.set_filter();
@ with the kernel:
<<valid lenslet>>=
__global__ void set_valid_lenslet(char *lenslet_mask, char *actuator_mask,
				    int NL, float *lenslet_intensity_map,
				    int max_idx, float threshold)
{
  int iL, jL, kL, kA, iSource;
  float max_intensity_threshold;
  // lenslet index
  iL = blockIdx.x * blockDim.x + threadIdx.x;
  jL = blockIdx.y * blockDim.y + threadIdx.y;
  iSource = blockIdx.z;
  if ( (iL<NL) && (jL<NL) )
    {
      kL = iL*NL + jL + iSource*NL*NL;
      max_intensity_threshold = lenslet_intensity_map[max_idx];
      max_intensity_threshold *= threshold;
      if (lenslet_intensity_map[kL]>=max_intensity_threshold)
	{

	  lenslet_mask[kL] = 1;

	  kA = lenset2actuator(iL,jL,NL, 1, 1);
	  kA += iSource*(1+NL)*(1+NL);
	  actuator_mask[kA] = 1;
	  kA = lenset2actuator(iL,jL,NL,-1, 1);
	  kA += iSource*(1+NL)*(1+NL);
	  actuator_mask[kA] = 1;
	  kA = lenset2actuator(iL,jL,NL,-1,-1);
	  kA += iSource*(1+NL)*(1+NL);
	  actuator_mask[kA] = 1;
	  kA = lenset2actuator(iL,jL,NL, 1,-1);
	  kA += iSource*(1+NL)*(1+NL);
	  actuator_mask[kA] = 1;

	}
      else
	lenslet_intensity_map[kL] = 0.0;
    }
}
@

\subsection{Wavefront processing}
\label{sec:wavefront-processing}

The guide star [[gs]] is propagated through the lenslet array to the detector:
\index{shackHartmann!shackHartmann!propagate}
<<wavefront propagation>>=
void shackHartmann::propagate(source *gs) {
    /* printf("slopes gain:%.2E\n",slopes_gain); */
  camera.pixel_scale = gs->wavelength()/(lenslet_pitch*DFT_osf);
  /* printf("pixel scale:%.2E\n",pixel_scale); */
  pixel_scale = camera.pixel_scale*camera.BIN_IMAGE*slopes_gain;
  camera.propagate(gs);
}
@ and the resulting frame is processed to extract the centroids
\index{shackHartmann!shackHartmann!process}
<<wavefront centroiding>>=
void shackHartmann::process(void) {
  data_proc.get_data(camera.d__frame,camera.N_PX_CAMERA,
		     d__cx0,d__cy0,pixel_scale,
		     valid_lenslet.m);
}
@
Noiseless propagation and centroiding can be performed with a single call to:
\index{shackHartmann!shackHartmann!analyze}
<<wavefront processing>>=
void shackHartmann::analyze(source *gs) {
    /* printf("slopes gain:%.2E\n",slopes_gain); */
  camera.pixel_scale = gs->wavelength()/(lenslet_pitch*DFT_osf);
  /* printf("pixel scale:%.2E\n",pixel_scale); */
  pixel_scale = camera.pixel_scale*camera.BIN_IMAGE*slopes_gain;
  camera.propagate(gs);
  data_proc.get_data(camera.d__frame,camera.N_PX_CAMERA,
		     d__cx0,d__cy0,pixel_scale,
		     valid_lenslet.m);
}
@
A pointer to the detector frame is obtained with
<<get detector frame>>=
float* shackHartmann::get_frame_dev_ptr(void) {
  return camera.d__frame;
}
@
The slopes in the valid lenslet are extracted with
\index{shackHartmann!shackHartmann!get\_valid\_slopes}
<<valid lenslet slopes>>=
void shackHartmann::get_valid_slopes(float *d__valid_slopes)
{
  dim3 blockDim(16,16);
  dim3 gridDim(valid_lenslet.nnz/256+1,1);
  get_valid_slopes_kern LLL gridDim, blockDim RRR (d__valid_slopes, valid_lenslet.idx,
						   valid_lenslet.nnz, data_proc.d__c,
						   N_LENSLET);
}
@ with
<<valid lenslet slopes kernel>>=
__global__ void get_valid_slopes_kern(float *d__valid_slopes,  int *idx,
				      const int NNZ, float *d__c, const int N_LENSLET)
{
  int i, j, k, iSource, _idx_;
  i = blockIdx.x * blockDim.x + threadIdx.x;
  j = blockIdx.y * blockDim.y + threadIdx.y;
  k = j * gridDim.x * blockDim.x + i;
  if (k<NNZ) {
    _idx_ = idx[k];
    iSource = _idx_/N_LENSLET;
    _idx_ += iSource*N_LENSLET;
    d__valid_slopes[k]     = d__c[ _idx_ ];
    d__valid_slopes[k+NNZ] = d__c[ _idx_ + N_LENSLET];
  }
}
@
\subsection{Input/Output}
\label{sec:inputoutput}

\section{Tests}
\label{sec:tests}

All CEO programs must include the following headers which also contains the headers for all the CEO library modules.
<<main header>>=
#ifndef __CEO_H__
#include "h"
#endif

<<shackHartmann.bin>>=
<<test 2>>

@
\subsection{Test 1}
\label{sec:test-1}

In this section, the generation of the imagelets and slopes of a Shack--Hartmann WFS are described.

@
The main function is:
<<test 1>>=
<<main header>>
<<square tiled geometry>>
int main(int argc,char *argv[]) {
printf(" ##### TEST 1 #####\n");
if (argc != 4) {
  printf("Usage: %s N_SIDE_LENSLET N_PX_LENSLET N_GS\n",argv[0]);
  return 1;
 }
cudaSetDevice(0);
<<test 1 setup>>
wfs.calibrate(&gs,0.5);

atm.get_phase_screen(&gs,N_GS,p,N_PX,p,N_PX,0);
gs.wavefront.masked();

wfs.analyze(&gs);
gs.wavefront.show_amplitude("Shack-Hartmann/pupil");
gs.wavefront.show_phase("Shack-Hartmann/wavefront");
wfs.camera.show_frame("Shack-Hartmann/frame");
wfs.data_proc.show_centroids("Shack-Hartmann/centroids");
wfs.data_proc.show_flux("Shack-Hartmann/flux");


lmmse.estimation(&wfs.data_proc);
atm.get_phase_screen(&gs_dm,N_GS,d,N_ACTUATOR,d,N_ACTUATOR,0);
gs_dm.wavefront.masked(&DM_mask);
gs_dm.wavefront.show_phase("Shack-Hartmann/wavefront low res.");
phase_screen.M = &DM_mask;
phase_screen.add_phase(1,lmmse.d__phase_est);
//phase_screen.add_phase(-1,gs_dm.wavefront.phase);
phase_screen.show_phase("Shack-Hartmann/recon. wavefront");

/*
atm.get_phase_screen_gradient(&wfs.data_proc,N_SIDE_LENSLET,d,&gs,N_GS,0);
wfs.data_proc.show_centroids("Shack-Hartmann/geometric centroids");

lmmse.estimation(&wfs.data_proc);
phase_screen.reset();
phase_screen.add_phase(1,lmmse.d__phase_est);
//phase_screen.add_phase(-1,gs_dm.wavefront.phase);

phase_screen.show_phase("Shack-Hartmann/geom. recon. wavefront");
*/

<<test 1 cleanup>>
}
@
The input parameters are
\begin{itemize}
\item the size of the lenslet array [[N_SIDE_LENSLET]]$\times$[[N_SIDE_LENSLET]],
<<test 1 setup>>=
int N_SIDE_LENSLET, N_ACTUATOR, N_ACTUATOR2;
N_SIDE_LENSLET = atoi( argv[1] );
N_ACTUATOR     = N_SIDE_LENSLET + 1;
N_ACTUATOR2    = N_ACTUATOR*N_ACTUATOR;
printf("__ SHACK-HARTMANN __\n");
printf(" . %dX%d lenslets: \n", N_SIDE_LENSLET, N_SIDE_LENSLET);
@ \item the number of pixel per lenslet [[N_PX_LENSLET]]$\times$[[N_PX_LENSLET]]
<<test 1 setup>>=
int N_PX_LENSLET;
N_PX_LENSLET = atoi( argv[2] );
printf(" . %dX%d pixels per lenslet: \n", N_PX_LENSLET, N_PX_LENSLET);
@ \item the number of sources,
<<test 1 setup>>=
int N_GS;
N_GS = atoi( argv[3] );
printf(" . source #: %d\n", N_GS);
@ \end{itemize}
The total number of pixel is given by
<<test 1 setup>>=
int N_PX, N_PX2;
N_PX  = N_SIDE_LENSLET*N_PX_LENSLET;
N_PX2 = N_PX*N_PX;
float p, d;
p = 25.0/N_PX;
d = 25.0/N_SIDE_LENSLET;
@
The guide star is defined with
<<test 1 setup>>=
float zenith[] = {ARCSEC(30),ARCSEC(30),ARCSEC(30),ARCSEC(30),ARCSEC(30),ARCSEC(30)},
  azimuth[] = {0,2.*PI/6.,4.*PI/6.,6.*PI/6.,8.*PI/6.,10.*PI/6.,12.*PI/6.};
source gs;
gs.setup("K", zenith, azimuth, INFINITY, N_GS, N_PX2);
<<test 1 cleanup>>=
gs.cleanup();
@
The telescope pupil is defined with the [[mask]] structure:
<<test 1 setup>>=
mask telescope;
telescope.setup_circular(N_PX);
gs.wavefront.masked(&telescope);
<<test 1 cleanup>>=
telescope.cleanup();
@
The wavefront sampled on the actuators location is from the following guide star:
<<test 1 setup>>=
source gs_dm;
gs_dm.setup("K", zenith, azimuth, INFINITY, N_GS, N_ACTUATOR2);
<<test 1 cleanup>>=
gs_dm.cleanup();
@
The wavefront sensor is defined with:
<<test 1 setup>>=
shackHartmann wfs;
wfs.setup(N_SIDE_LENSLET,N_PX_LENSLET,d,2,N_PX_LENSLET,1,N_GS);
<<test 1 cleanup>>=
wfs.cleanup();
@
The timing is done with the [[stopwatch]] structure:
<<test 1 setup>>=
stopwatch tid;
@
The square pupil is made of tiles [[N_PX_LENSLET]]$\times$[[N_PX_LENSLET]] pixels with intensity equal to lenslet index
<<setup opt-out>>=
dim3 blockDim(16,16);
dim3 gridDim(1+N_PX_LENSLET*N_SIDE_LENSLET/16,1+N_PX_LENSLET*N_SIDE_LENSLET/16,N_GS);
squareTiledPupil LLL gridDim,blockDim RRR (gs.wavefront.amplitude, N_PX_LENSLET, N_SIDE_LENSLET, N_GS);
gs.wavefront.show_amplitude("Shack-Hartmann/amplitude",N_PX,N_PX*N_GS);
<<square tiled geometry>>=
__global__ void squareTiledPupil(float* amplitude, const int N_PX_LENSLET, const int N_SIDE_LENSLET, const int N_GS) {
  int i, j, iLenslet, jLenslet, ij_PUPIL, iSource, kLenslet;
  iSource = blockIdx.z;
  if ( threads2lenslet(threadIdx, blockIdx, blockDim,
		       &i, &j, N_PX_LENSLET,
		       &iLenslet, &jLenslet, N_SIDE_LENSLET) ) {
    ij_PUPIL = lenslet2array(i,j,N_PX_LENSLET,iLenslet,jLenslet,N_SIDE_LENSLET,iSource);
    kLenslet = iLenslet*N_SIDE_LENSLET + jLenslet;
    amplitude[ij_PUPIL] = ((float) (kLenslet + 1)) + iSource*0.5;
  }
}
@
The atmosphere model is created with:
<<test 1 setup>>=
atmosphere atm;
atm.gmt_setup(20e-2,30);
<<test 1 cleanup>>=
atm.cleanup();
@ The reconstructed wavefront is saved in:
<<test 1 setup>>=
complex_amplitude phase_screen;
phase_screen.setup((N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1));
<<test 1 cleanup>>=
phase_screen.cleanup();
@ The DM mask:
<<test 1 setup>>=
mask DM_mask;
DM_mask.setup( (N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1) );
<<test 1 cleanup>>=
DM_mask.cleanup();
@
The Fried geometry for a circular pupil with the intensity [[threshold]] is enforced::
<<test 1 setup>>=
float threshold = 0.5;
wfs.data_proc.MASK_SET = fried_geometry_setup(wfs.data_proc.lenslet_mask, DM_mask.m,
				    N_SIDE_LENSLET, 16, threshold);
@
The filtering properties associated with the pupil are set with:
<<test 1 setup>>=
DM_mask.set_filter();
@
The wavefront is reconstructed from the centroids:
<<test 1 setup>>=
LMMSE lmmse;
lmmse.setup(&atm,&gs,&gs,d,N_SIDE_LENSLET,&DM_mask,"MINRES");
<<test 1 cleanup>>=
lmmse.cleanup();
@

\subsection{Test 2}
\label{sec:test-2}

The input parameters are
\begin{itemize}
\item the size of the lenslet array [[N_SIDE_LENSLET]]$\times$[[N_SIDE_LENSLET]],
<<setup test 2>>=
int N_SIDE_LENSLET, N_ACTUATOR, N_ACTUATOR2;
N_SIDE_LENSLET = atoi( argv[1] );
int _N_LENSLET_ = (N_SIDE_LENSLET*N_SIDE_LENSLET);
N_ACTUATOR     = N_SIDE_LENSLET + 1;
N_ACTUATOR2    = N_ACTUATOR*N_ACTUATOR;
printf("__ SHACK-HARTMANN __\n");
printf(" . %dX%d lenslets: \n", N_SIDE_LENSLET, N_SIDE_LENSLET);
@ \item the number of pixel per lenslet [[N_PX_LENSLET]]$\times$[[N_PX_LENSLET]]
<<setup test 2>>=
int N_PX_LENSLET;
N_PX_LENSLET = atoi( argv[2] );
printf(" . %dX%d pixels per lenslet: \n", N_PX_LENSLET, N_PX_LENSLET);
@ \item the number of sources,
<<setup test 2>>=
int N_GS;
N_GS = atoi( argv[3] );
printf(" . source #: %d\n", N_GS);
@ \end{itemize}
The total number of pixel is given by
<<setup test 2>>=
int N_PX, N_PX2;
N_PX  = N_SIDE_LENSLET*N_PX_LENSLET;
N_PX2 = N_PX*N_PX;
float p, d, D;
D = 25.0;
p = D/N_PX;
d = D/N_SIDE_LENSLET;
@
The components common to all the systems are defined first:
\begin{itemize}
\item the science source,
<<setup test 2>>=
source src;
src.setup("J",ARCSEC(0) , 0, INFINITY,(N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1), "SRC");
<<cleanup test 2>>=
src.cleanup();
@ \item the atmosphere,
<<setup test 2>>=
atmosphere atm;
//atm.setup(20e-2,30,10e3,10,0);
atm.gmt_setup(15e-2,60);
/*
float altitude[] = {0, 10e3},
xi0[] = {0.5, 0.5},
wind_speed[] = {10, 10},
wind_direction[] = {0, 0};
atm.setup(20e-2,30,altitude, xi0, wind_speed, wind_direction);
*/
<<cleanup test 2>>=
atm.cleanup();
@ \item the pupil mask.
<<setup test 2>>=
  //mask pupil_mask;
  //pupil_mask.setup( (N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1) );
<<cleanup test 2>>=
  //pupil_mask.cleanup();
@ \item the wavefront sensor centroid container,
<<setup test 2>>=
  //centroiding cog;
  //cog.setup(N_SIDE_LENSLET,1);
<<cleanup test 2>>=
  //cog.cleanup();
@ \item the diffraction limited science imager,
<<setup test 2>>=
imaging imager;
imager.setup(N_SIDE_LENSLET+1,1,4,1,1);
<<cleanup test 2>>=
imager.cleanup();
@ \item the turbulence limited science imager,
<<setup test 2>>=
imaging imager_turb;
imager_turb.setup(N_SIDE_LENSLET+1,1,4,1,1);
<<cleanup test 2>>=
imager_turb.cleanup();
@ \item the science imager for NGSAO LMMSE,
<<setup test 2>>=
imaging imager_ngsao_lmmse;
imager_ngsao_lmmse.setup(N_SIDE_LENSLET+1,1,4,1,1);
<<cleanup test 2>>=
imager_ngsao_lmmse.cleanup();
@ \item the statistical tool.
<<setup test 2>>=
stats S;
S.setup();
<<cleanup test 2>>=
S.cleanup();
@  \end{itemize}

The natural guide star (NGS) is given by:
<<setup test 2>>=
source ngs;
ngs.setup("R",ARCSEC(0) , 0, INFINITY, (N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1), "NGS");
<<cleanup test 2>>=
ngs.cleanup();
@
The wavefront sensor is defined with:
<<setup test 2>>=
shackHartmann wfs;
wfs.setup(N_SIDE_LENSLET,N_PX_LENSLET,d,2,N_PX_LENSLET,1,N_GS);
wfs.calibrate(&ngs,0.5);
<<cleanup test 2>>=
wfs.cleanup();

@
The Fried geometry for a circular pupil with the intensity [[threshold]] is enforced::
<<setup test 2>>=
  //float threshold = 0.5;
  //cog.MASK_SET = fried_geometry_setup(cog.lenslet_mask, pupil_mask.m,
//				    N_SIDE_LENSLET, 16, threshold);
@
The filtering properties associated with the pupil are set with:
<<setup test 2>>=
  wfs.valid_actuator.set_filter();
  //pupil_mask.set_filter();
@
The science is propagated through the [[pupil_mask]] to the focal plane of the [[imager]]:
<<setup test 2>>=
src.wavefront.masked(&wfs.valid_actuator);
imager.propagate(&src);
//imager.frame2file("refFrame.bin");
char plotly_name[64], plotly_dir[64];
sprintf(plotly_dir,"Shack-Hartmann+LMMSE/D=%.1fm, N=%d (%d samples)/",D,N_SIDE_LENSLET,N_SAMPLE);
SET_PLOTLY_NAME(plotly_name,plotly_dir,"frames/diffraction limited");
imager.show_frame(plotly_name);

@ A few useful variables are defined here:
<<setup test 2>>=
int NP, NP2, k_SAMPLE;
float tau=0.;
NP = N_SIDE_LENSLET+1;
NP2 = NP*NP;
k_SAMPLE = 0;
@
The science wavefront is propagated through the atmosphere from [[src]] to [[pupil_mask]].
<<science wavefront>>=
atm.get_phase_screen(&src,d,NP,d,NP,tau);
src.wavefront.masked();
if (k_SAMPLE==(N_SAMPLE-1)) {
  SET_PLOTLY_NAME(plotly_name,plotly_dir,"phases/science phase screen");
  src.wavefront.show_phase(plotly_name);
 }
<<setup test 2>>=
float science_wf_rms=0.;
<<science wavefront>>=
science_wf_rms += S.var(src.wavefront.phase, &wfs.valid_actuator, NP2);

@  and then propagated to the focal plane of the imager:
<<science wavefront>>=
imager_turb.propagate(&src);
if (k_SAMPLE==(N_SAMPLE-1)) {
  SET_PLOTLY_NAME(plotly_name,plotly_dir,"frames/turbulence limited");
  imager_turb.show_frame(plotly_name);
 }
@ The turbulence wavefront is saved apart for later use:
<<science wavefront>>=
complex_amplitude phase_screen;
phase_screen.setup((N_SIDE_LENSLET+1)*(N_SIDE_LENSLET+1));
phase_screen.add_phase(1,src.wavefront.phase);

@
All CEO programs must include the following headers which also contains the headers for all the CEO library modules.
<<main header>>=
#ifndef __CEO_H__
#include "h"
#endif
@ The number of atmosphere sample
<<main header>>=
#define N_SAMPLE 1
#define PLOTLY_LIM (N_SAMPLE-1) // (N_SAMPLE-1) for plotting, higher for disabling plotting
@
The main function is:
<<test 2>>=
<<main header>>
void SET_PLOTLY_NAME(char *name,char *dir,char *path)
{
strcpy(name, dir);
strcat(name,path);
}
int main(int argc,char *argv[]) {
printf(" ##### TEST 2 #####\n");
if (argc != 4) {
  printf("Usage: %s N_SIDE_LENSLET N_PX_LENSLET N_GS\n",argv[0]);
  return 1;
 }
cudaSetDevice(0);
<<setup test 2>>
fprintf(stdout," Samples: %d:\n",N_SAMPLE);
for (k_SAMPLE=0;k_SAMPLE<N_SAMPLE;k_SAMPLE++) {
  fprintf(stdout,"\r%4d",k_SAMPLE);
  atm.reset();

 printf("WFS MASK SET: %d\n",wfs.data_proc.MASK_SET);

<<science wavefront>>
<<ngsao>>
    }
 fprintf(stdout,"\n");
<<results>>
<<cleanup test 2>>
}


@  The NGS wavefront gradients are computed with:
<<ngsao>>=
atm.get_phase_screen_gradient(&wfs.data_proc,N_SIDE_LENSLET,d,&ngs,tau);

@
The wavefront is reconstructed from the NGS centroids:
<<setup test 2>>=
LMMSE ngs_lmmse;
ngs_lmmse.setup(&atm,&ngs,&src,&wfs,"MINRES");
int cvgce_iteration=0;
float elapsed_time=0.;
<<ngsao>>=
ngs_lmmse.estimation(&wfs.data_proc);
elapsed_time += ngs_lmmse.elapsed_time;
cvgce_iteration += ngs_lmmse.iSolve.cvgce_iteration;
@ The LMMMSE NGS wavefront estimate is subtracted from the science wavefront:
<<ngsao>>=
src.wavefront.reset(phase_screen);
src.wavefront.add_phase(-1,ngs_lmmse.d__phase_est);
if (k_SAMPLE==PLOTLY_LIM) {
  SET_PLOTLY_NAME(plotly_name,plotly_dir,"phases/LMMSE NGS AO");
  src.wavefront.show_phase(plotly_name);
 }
<<setup test 2>>=
float ngs_wfe_rms_lmmse=0.;
<<ngsao>>=
ngs_wfe_rms_lmmse += S.var(src.wavefront.phase,
		   &wfs.valid_actuator, NP2);
//ngs_lmmse.toFile("phaseEstNgsItp.bin");
<<cleanup test 2>>=
ngs_lmmse.cleanup();
@ and the residual wavefront corresponding image is computed.
<<ngsao>>=
imager_ngsao_lmmse.propagate(&src);
//imager.frame2file("ngsLmmseFrame.bin");
if (k_SAMPLE==PLOTLY_LIM) {
  SET_PLOTLY_NAME(plotly_name,plotly_dir,"frames/LMMSE NGS AO");
  imager_ngsao_lmmse.show_frame(plotly_name,&imager);
 }

@
\subsubsection{Results}
\label{sec:results}

<<results>>=
science_wf_rms    = 1E9*sqrtf(science_wf_rms/N_SAMPLE);
ngs_wfe_rms_lmmse = 1E9*sqrtf(ngs_wfe_rms_lmmse/N_SAMPLE);
elapsed_time /= N_SAMPLE;
cvgce_iteration /= N_SAMPLE;
printf("------------------------------\n");
printf("___  TURBULENCE WAVEFRONT ___\n");
printf("\n NGS WF RMS: %7.2fnm\n", science_wf_rms);
printf("\n___ ON-AXIS WAVEFRONT ESTIMATE FROM NGS ___\n");
printf("\n NGS MMSE WFE RMS: %8.3fnm in %.2fms with %d iterations\n",
       ngs_wfe_rms_lmmse,elapsed_time,cvgce_iteration);
printf("------------------------------\n");
@

\subsection{Python}
\label{sec:python-1}

<<shackHartmann.py>>=
#!/usr/bin/env python

import sys
sys.path.append("/home/rconan/CEO/python")
from pylab import *
from import *

nLenslet = 20
D = 10.0
n = 7
nPx = n*nLenslet
nn = array([nPx,nPx],dtype=int32)
nSrc = 1
zen = zeros( nSrc, dtype=float32)
azi = zeros( nSrc, dtype=float32)
src = Source("K",zen,azi,float("inf"),nn,fwhm=2)

tel = Telescope(n*nLenslet)
src.masked(tel)

wfs = ShackHartmann(nLenslet, n, D/nLenslet, 2, n, 1, nSrc)
wfs.calibrate(src,0.5)
wfs.analyze(src)

frame0 = zeros( (nPx*nSrc,nPx), order="c", dtype=float32)
wfs.getframe(frame0)

figure(1)
ax = imshow(frame0,interpolation='None')
colorbar(ax)
draw()

atm = GmtAtmosphere(15e-2,30)
p = D/nPx
atm.get_phase_screen(src, nSrc,  p, nPx, p, nPx, 0.0)
src.masked(tel)
ps = zeros( (nPx*nSrc,nPx), order="c", dtype=float32)
src.getphase(ps)

figure(2)
subplot(1, 3, 1)
ax = imshow(ps,interpolation='None')
colorbar(ax)

wfs.reset()
wfs.analyze(src)
wfs.getframe(frame0)

subplot(1, 3, 2)
ax = imshow(frame0,interpolation='None')
colorbar(ax)

c = zeros( nSrc*2*nLenslet**2, order="c", dtype=float32 )
wfs.getc(c)

subplot(1, 3, 3)
ax = imshow(reshape(c,[nSrc*nLenslet*2,nLenslet]),interpolation='None')
colorbar(ax)
show()
